{"ast":null,"code":"import _classCallCheck from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/src/components/views/Donate/InformationForm.js\";\nimport React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\n\nvar InformationForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InformationForm, _Component);\n\n  function InformationForm(props) {\n    var _this;\n\n    _classCallCheck(this, InformationForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InformationForm).call(this, props));\n    _this.statesFull = [\"ALABAMA\", \"ALASKA\", \"ARIZONA\", \"ARKANSAS\", \"CALIFORNIA\", \"COLORADO\", \"CONNECTICUT\", \"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"HAWAII\", \"IDAHO\", \"ILLINOIS\", \"INDIANA\", \"IOWA\", \"KANSAS\", \"KENTUCKY\", \"LOUISIANA\", \"MAINE\", \"MARYLAND\", \"MASSACHUSETTS\", \"MICHIGAN\", \"MINNESOTA\", \"MISSISSIPPI\", \"MISSOURI\", \"MONTANA\", \"NEBRASKA\", \"NEVADA\", \"NEW HAMPSHIRE\", \"NEW JERSEY\", \"NEW MEXICO\", \"NEW YORK\", \"NORTH CAROLINA\", \"NORTH DAKOTA\", \"OHIO\", \"OKLAHOMA\", \"OREGON\", \"PENNSYLVANIA\", \"RHODE ISLAND\", \"SOUTH CAROLINA\", \"SOUTH DAKOTA\", \"TENNESSEE\", \"TEXAS\", \"UTAH\", \"VERMONT\", \"VIRGINIA\", \"WASHINGTON\", \"WEST VIRGINIA\", \"WISCONSIN\", \"WYOMING\", \"WASHINGTON DC\", \"WASHINGTON D.C.\", \"DISTRICT OF COLUMBIA\", \"AMERICAN SAMOA\", \"SAMOA\", \"GUAM\", \"NORTHERN MARIANA ISLANDS\", \"NORTHERN MARIANA\", \"MARIANA ISLANDS\", \"MARIANA\", \"PUERTO RICO\", \"VIRGIN ISLANDS\", \"VIRGIN\"];\n    _this.statesAbbr = [\"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"AS\", \"DC\", \"GU\", \"MP\", \"PR\", \"VI\"];\n    _this.state = {\n      validated: false,\n      name: '',\n      addr1: '',\n      addr2: '',\n      city: '',\n      state: '',\n      zip: '',\n      email: '',\n      phone: '+1 ',\n      contactAllowed: true\n    };\n    _this.submit = _this.submit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleName = _this.handleName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddr1 = _this.handleAddr1.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddr2 = _this.handleAddr2.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCity = _this.handleCity.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleState = _this.handleZip.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleZip = _this.handleZip.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleEmail = _this.handleEmail.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handlePhone = _this.handlePhone.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCheck = _this.handleCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateGeneric = _this.validateGeneric.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateState = _this.validateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateZip = _this.validateZip.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateEmail = _this.validateEmail.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validatePhone = _this.validatePhone.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stateForInput = _this.stateForInput.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fullToAbbr = _this.fullToAbbr.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(InformationForm, [{\n    key: \"submit\",\n    value: function submit(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.props.nextDisabled(!event.currentTarget.checkValidity());\n      this.setState({\n        validated: true\n      });\n    }\n  }, {\n    key: \"handleName\",\n    value: function handleName(name) {\n      this.setState({\n        name: name.target.value\n      });\n    }\n  }, {\n    key: \"handleAddr1\",\n    value: function handleAddr1(addr1) {\n      this.setState({\n        addr1: addr1.target.value\n      });\n    }\n  }, {\n    key: \"handleAddr2\",\n    value: function handleAddr2(addr2) {\n      this.setState({\n        addr2: addr2.target.value\n      });\n    }\n  }, {\n    key: \"handleCity\",\n    value: function handleCity(city) {\n      this.setState({\n        city: city.target.value\n      });\n    }\n  }, {\n    key: \"handleState\",\n    value: function handleState(state) {\n      console.log(state.target.value);\n      this.setState({\n        state: state.target.value\n      });\n    }\n  }, {\n    key: \"handleZip\",\n    value: function handleZip(zip) {\n      if (zip.target.value.length < 6) {\n        if (!isNaN(zip.target.value)) {\n          this.setState({\n            zip: zip.target.value\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleEmail\",\n    value: function handleEmail(email) {\n      console.log(email.target.value);\n      this.setState({\n        email: email.target.value\n      });\n    }\n  }, {\n    key: \"handlePhone\",\n    value: function handlePhone(phone) {\n      console.log(phone.target.value);\n      var value = phone.target.value;\n\n      if (value.length >= 3) {\n        this.setState({\n          phone: value\n        });\n      }\n    }\n  }, {\n    key: \"handleCheck\",\n    value: function handleCheck(check) {\n      this.setState({\n        checked: check.target.value\n      });\n    }\n  }, {\n    key: \"validateGeneric\",\n    value: function validateGeneric(generic) {\n      return this.state.validated ? generic.length > 0 && isNaN(generic) : null;\n    }\n  }, {\n    key: \"validateState\",\n    value: function validateState(state) {\n      return this.state.validated ? !(this.state.state == null) : null;\n    }\n  }, {\n    key: \"validateZip\",\n    value: function validateZip(zip) {\n      return this.state.validated ? zip.length === 5 && !isNaN(zip) : null;\n    }\n  }, {\n    key: \"validateEmail\",\n    value: function validateEmail(email) {\n      var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return this.state.validated ? emailRegex.test(email.toLowerCase()) : null;\n    }\n  }, {\n    key: \"validatePhone\",\n    value: function validatePhone(phone) {\n      return this.state.validated ? phone.length === 19 : null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        noValidate: true,\n        validated: this.state.validated,\n        onSubmit: function onSubmit(e) {\n          e.target.name = \"name\";\n\n          _this2.submit(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Form.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Full Name / Organization\"), React.createElement(Form.Control, {\n        required: true,\n        type: \"text\",\n        placeholder: \"John Doe\",\n        value: this.state.name,\n        onChange: function onChange(e) {\n          return _this2.handleName(e);\n        },\n        isValid: this.validateGeneric(this.state.name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(Form.Control.Feedback, {\n        type: \"invalid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Please enter a valid name / organization.\"))), React.createElement(Form.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"addr1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Address Line 1\"), React.createElement(Form.Control, {\n        required: true,\n        type: \"text\",\n        placeholder: \"12345 Artificial Dr\",\n        value: this.state.addr1,\n        onChange: function onChange(e) {\n          return _this2.handleAddr1(e);\n        },\n        isValid: this.validateGeneric(this.state.addr1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(Form.Control.Feedback, {\n        type: \"invalid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Please enter a valid address.\")), \"\\xA0\", React.createElement(Form.Group, {\n        controlId: \"addr2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Address Line 2\"), React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"Apt. 27\",\n        value: this.state.addr2,\n        onChange: function onChange(e) {\n          return _this2.handleAddr2(e);\n        },\n        isValid: this.validateGeneric(this.state.addr2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }))), React.createElement(Form.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"city\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"City\"), React.createElement(Form.Control, {\n        required: true,\n        type: \"text\",\n        placeholder: \"City\",\n        value: this.state.city,\n        onChange: function onChange(e) {\n          return _this2.handleCity(e);\n        },\n        isValid: this.validateGeneric(this.state.city),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), React.createElement(Form.Control.Feedback, {\n        type: \"invalid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Please enter a valid city.\")), \"\\xA0\", React.createElement(Form.Group, {\n        controlId: \"state\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"State\"), React.createElement(Form.Control, {\n        required: true,\n        type: \"text\",\n        placeholder: \"State\",\n        value: this.state.state,\n        onChange: function onChange(e) {\n          return _this2.handleState(e);\n        },\n        isValid: this.validateState(this.state.state),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), React.createElement(Form.Control.Feedback, {\n        type: \"invalid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Please enter a valid state.\")), \"\\xA0\", React.createElement(Form.Group, {\n        controlId: \"zip\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Zip / Postal Code\"), React.createElement(Form.Control, {\n        required: true,\n        type: \"text\",\n        placeholder: \"12345\",\n        value: this.state.zip,\n        onChange: function onChange(e) {\n          return _this2.handleZip(e);\n        },\n        isValid: this.validateZip(this.state.zip),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), React.createElement(Form.Control.Feedback, {\n        type: \"invalid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Please enter a valid zip / postal code.\"))), React.createElement(Form.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Email Address\"), React.createElement(Form.Control, {\n        required: true,\n        type: \"email\",\n        placeholder: \"example@domain.ext\",\n        value: this.state.email,\n        onChange: function onChange(e) {\n          return _this2.handleEmail(e);\n        },\n        isValid: this.validateEmail(this.state.email),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(Form.Control.Feedback, {\n        type: \"invalid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"Please enter a valid email.\")), \"\\xA0\", React.createElement(Form.Group, {\n        controlId: \"phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"Phone Number\"), React.createElement(Form.Control, {\n        required: true,\n        type: \"text\",\n        placeholder: \"+1 (123) 456 - 7890\",\n        value: this.state.phone,\n        onChange: function onChange(e) {\n          return _this2.handlePhone(e);\n        },\n        isValid: this.validatePhone(this.state.phone),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }))), React.createElement(Form.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"contactAllowed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        type: \"checkbox\",\n        label: \"Receive updates from donation recipients throughout the season\",\n        checked: this.state.contactAllowed,\n        onChange: function onChange(e) {\n          return _this2.handleCheck(e);\n        },\n        isValid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }))), React.createElement(Form.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }, {\n    key: \"stateForInput\",\n    value: function stateForInput(input) {\n      if (!(input == null)) {\n        var casedInput = input.trim().toUpperCase();\n        var statesFullPos = this.statesFull.indexOf(casedInput);\n\n        if (!(statesFullPos === -1)) {\n          return this.fullToAbbr(this.statesFull[statesFullPos]);\n        }\n\n        var statesAbbrPos = this.statesAbbr.indexOf(casedInput);\n\n        if (!(statesAbbrPos === -1)) {\n          return this.statesAbbr[statesAbbrPos];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"fullToAbbr\",\n    value: function fullToAbbr(full) {\n      var index = this.statesFull.indexOf(full);\n\n      if (index > -1) {\n        if (index < 50) {\n          return this.statesAbbr[index];\n        }\n\n        if (49 < index && index < 53) {\n          return this.statesAbbr[51];\n        }\n\n        if (52 < index && index < 55) {\n          return this.statesAbbr[50];\n        }\n\n        if (index === 55) {\n          return this.statesAbbr[52];\n        }\n\n        if (55 < index && index < 60) {\n          return this.statesAbbr[53];\n        }\n\n        if (index === 60) {\n          return this.statesAbbr[54];\n        }\n\n        if (60 < index && index < 63) {\n          return this.Abbr[55];\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return InformationForm;\n}(Component);\n\nexport { InformationForm as default };","map":{"version":3,"sources":["/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/src/components/views/Donate/InformationForm.js"],"names":["React","Component","Button","Form","InformationForm","props","statesFull","statesAbbr","state","validated","name","addr1","addr2","city","zip","email","phone","contactAllowed","submit","bind","handleName","handleAddr1","handleAddr2","handleCity","handleState","handleZip","handleEmail","handlePhone","handleCheck","validateGeneric","validateState","validateZip","validateEmail","validatePhone","stateForInput","fullToAbbr","event","preventDefault","stopPropagation","nextDisabled","currentTarget","checkValidity","setState","target","value","console","log","length","isNaN","check","checked","generic","emailRegex","test","toLowerCase","e","input","casedInput","trim","toUpperCase","statesFullPos","indexOf","statesAbbrPos","full","index","Abbr"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Form} from 'react-bootstrap';\n\nexport default class InformationForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            validated: false,\n            name: '',\n            addr1: '',\n            addr2: '',\n            city: '',\n            state: '',\n            zip: '',\n            email: '',\n            phone: '+1 ',\n            contactAllowed: true\n        }\n\n        this.submit = this.submit.bind(this);\n        this.handleName = this.handleName.bind(this);\n        this.handleAddr1 = this.handleAddr1.bind(this);\n        this.handleAddr2 = this.handleAddr2.bind(this);\n        this.handleCity = this.handleCity.bind(this);\n        this.handleState = this.handleZip.bind(this);\n        this.handleZip = this.handleZip.bind(this);\n        this.handleEmail = this.handleEmail.bind(this);\n        this.handlePhone = this.handlePhone.bind(this);\n        this.handleCheck = this.handleCheck.bind(this);\n        this.validateGeneric = this.validateGeneric.bind(this);\n        this.validateState = this.validateState.bind(this);\n        this.validateZip = this.validateZip.bind(this);\n        this.validateEmail = this.validateEmail.bind(this);\n        this.validatePhone = this.validatePhone.bind(this);\n\n        this.stateForInput = this.stateForInput.bind(this);\n        this.fullToAbbr = this.fullToAbbr.bind(this);\n    }\n\n    submit(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.props.nextDisabled(!event.currentTarget.checkValidity());\n        this.setState({validated: true});\n    }\n\n    handleName(name) {\n        this.setState({name: name.target.value});\n    }\n\n    handleAddr1(addr1) {\n        this.setState({addr1: addr1.target.value});\n    }\n\n    handleAddr2(addr2) {\n        this.setState({addr2: addr2.target.value});\n    }\n\n    handleCity(city) {\n        this.setState({city: city.target.value});\n    }\n\n    handleState(state) {\n        console.log(state.target.value);\n        this.setState({state: state.target.value});\n    }\n\n    handleZip(zip) {\n        if (zip.target.value.length < 6) {\n            if (!isNaN(zip.target.value)) {\n                this.setState({zip: zip.target.value});\n            }\n        }\n    }\n\n    handleEmail(email) {\n        console.log(email.target.value);\n        this.setState({email: email.target.value});\n    }\n\n    handlePhone(phone) {\n        console.log(phone.target.value);\n        let value = phone.target.value;\n        if (value.length >= 3) {\n            this.setState({phone: value});\n        }\n    }\n\n    handleCheck(check) {\n        this.setState({checked: check.target.value});\n    }\n\n    validateGeneric(generic) {\n        return this.state.validated ? generic.length > 0 && isNaN(generic) : null;\n    }\n\n    validateState(state) {\n        return this.state.validated ? (!(this.state.state == null)) : null;\n    }\n\n    validateZip(zip) {\n        return this.state.validated ? (zip.length === 5 && !isNaN(zip)) : null;\n    }\n\n    validateEmail(email) {\n        var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return this.state.validated ? (emailRegex.test(email.toLowerCase())) : null;\n    }\n\n    validatePhone(phone) {\n        return this.state.validated ? (phone.length === 19) : null;\n    }\n\n    render() {\n        return (\n            <Form noValidate validated={this.state.validated} onSubmit={e => {\n                e.target.name = \"name\";\n                this.submit(e);\n            }}>\n                <Form.Row>\n                    <Form.Group controlId=\"name\">\n                        <Form.Label>Full Name / Organization</Form.Label>\n                        <Form.Control\n                            required\n                            type=\"text\"\n                            placeholder=\"John Doe\"\n                            value={this.state.name}\n                            onChange={e => this.handleName(e)}\n                            isValid={this.validateGeneric(this.state.name)}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please enter a valid name / organization.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group controlId=\"addr1\">\n                        <Form.Label>Address Line 1</Form.Label>\n                        <Form.Control\n                            required\n                            type=\"text\"\n                            placeholder=\"12345 Artificial Dr\"\n                            value={this.state.addr1}\n                            onChange={e => this.handleAddr1(e)}\n                            isValid={this.validateGeneric(this.state.addr1)}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please enter a valid address.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    &nbsp;\n                    <Form.Group controlId=\"addr2\">\n                        <Form.Label>Address Line 2</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Apt. 27\"\n                            value={this.state.addr2}\n                            onChange={e => this.handleAddr2(e)}\n                            isValid={this.validateGeneric(this.state.addr2)}\n                        />\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group controlId=\"city\">\n                        <Form.Label>City</Form.Label>\n                        <Form.Control\n                            required\n                            type=\"text\"\n                            placeholder=\"City\"\n                            value={this.state.city}\n                            onChange={e => this.handleCity(e)}\n                            isValid={this.validateGeneric(this.state.city)}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please enter a valid city.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    &nbsp;\n                    <Form.Group controlId=\"state\">\n                        <Form.Label>State</Form.Label>\n                        <Form.Control\n                            required\n                            type=\"text\"\n                            placeholder=\"State\"\n                            value={this.state.state}\n                            onChange={e => this.handleState(e)}\n                            isValid={this.validateState(this.state.state)}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please enter a valid state.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    &nbsp;\n                    <Form.Group controlId=\"zip\">\n                        <Form.Label>Zip / Postal Code</Form.Label>\n                        <Form.Control\n                            required\n                            type=\"text\"\n                            placeholder=\"12345\"\n                            value={this.state.zip}\n                            onChange={e => this.handleZip(e)}\n                            isValid={this.validateZip(this.state.zip)}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please enter a valid zip / postal code.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group controlId=\"email\">\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            required\n                            type=\"email\"\n                            placeholder=\"example@domain.ext\"\n                            value={this.state.email}\n                            onChange={e => this.handleEmail(e)}\n                            isValid={this.validateEmail(this.state.email)}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please enter a valid email.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    &nbsp;\n                    <Form.Group controlId=\"phone\">\n                        <Form.Label>Phone Number</Form.Label>\n                        <Form.Control\n                            required\n                            type=\"text\"\n                            placeholder=\"+1 (123) 456 - 7890\"\n                            value={this.state.phone}\n                            onChange={e => this.handlePhone(e)}\n                            isValid={this.validatePhone(this.state.phone)}\n                        />\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group controlId=\"contactAllowed\">\n                        <Form.Check\n                            type=\"checkbox\"\n                            label=\"Receive updates from donation recipients throughout the season\"\n                            checked={this.state.contactAllowed}\n                            onChange={e => this.handleCheck(e)}\n                            isValid={true}\n                        />\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Button type=\"submit\">Submit</Button>\n                </Form.Row>\n            </Form>\n        );\n    }\n\n    stateForInput(input) {\n        if (!(input == null)) {\n            let casedInput = input.trim().toUpperCase();\n            let statesFullPos = this.statesFull.indexOf(casedInput);\n            if (!(statesFullPos === -1)) {\n                return this.fullToAbbr(this.statesFull[statesFullPos]);\n            }\n\n            let statesAbbrPos = this.statesAbbr.indexOf(casedInput);\n            if (!(statesAbbrPos === -1)) {\n                return this.statesAbbr[statesAbbrPos];\n            }   \n        }\n        return null;\n    }\n\n    fullToAbbr(full) {\n        let index = this.statesFull.indexOf(full);\n        if (index > -1) {\n            if (index < 50) {\n                return this.statesAbbr[index];\n            }\n            if (49 < index && index < 53) {\n                return this.statesAbbr[51];\n            }\n            if (52 < index && index < 55) {\n                return this.statesAbbr[50];\n            }\n            if (index === 55) {\n                return this.statesAbbr[52];\n            }\n            if (55 < index && index < 60) {\n                return this.statesAbbr[53];\n            }\n            if (index === 60) {\n                return this.statesAbbr[54];\n            }\n            if (60 < index && index < 63) {\n                return this.Abbr[55];\n            }\n        }\n        return null;\n    }\n\n    statesFull = [\n        \"ALABAMA\", \"ALASKA\", \"ARIZONA\", \"ARKANSAS\",\n        \"CALIFORNIA\", \"COLORADO\", \"CONNECTICUT\", \"DELAWARE\",\n        \"FLORIDA\", \"GEORGIA\", \"HAWAII\", \"IDAHO\",\n        \"ILLINOIS\", \"INDIANA\", \"IOWA\", \"KANSAS\",\n        \"KENTUCKY\", \"LOUISIANA\", \"MAINE\", \"MARYLAND\",\n        \"MASSACHUSETTS\", \"MICHIGAN\", \"MINNESOTA\", \"MISSISSIPPI\",\n        \"MISSOURI\", \"MONTANA\", \"NEBRASKA\", \"NEVADA\",\n        \"NEW HAMPSHIRE\", \"NEW JERSEY\", \"NEW MEXICO\", \"NEW YORK\",\n        \"NORTH CAROLINA\", \"NORTH DAKOTA\", \"OHIO\", \"OKLAHOMA\",\n        \"OREGON\", \"PENNSYLVANIA\", \"RHODE ISLAND\", \"SOUTH CAROLINA\",\n        \"SOUTH DAKOTA\", \"TENNESSEE\", \"TEXAS\", \"UTAH\",\n        \"VERMONT\", \"VIRGINIA\", \"WASHINGTON\", \"WEST VIRGINIA\",\n        \"WISCONSIN\", \"WYOMING\", \"WASHINGTON DC\", \"WASHINGTON D.C.\",\n        \"DISTRICT OF COLUMBIA\",\n        \"AMERICAN SAMOA\", \"SAMOA\", \"GUAM\", \"NORTHERN MARIANA ISLANDS\",\n        \"NORTHERN MARIANA\", \"MARIANA ISLANDS\", \"MARIANA\", \"PUERTO RICO\",\n        \"VIRGIN ISLANDS\", \"VIRGIN\"\n    ];\n\n    statesAbbr = [\n        \"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\",\n        \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\",\n        \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\",\n        \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\",\n        \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\",\n        \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\",\n        \"WI\", \"WY\",\n        \"AS\", \"DC\", \"GU\", \"MP\", \"PR\", \"VI\"\n    ];\n}"]},"metadata":{},"sourceType":"module"}