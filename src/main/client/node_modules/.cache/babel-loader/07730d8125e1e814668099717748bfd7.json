{"ast":null,"code":"import _classCallCheck from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/src/components/views/Donate/PaymentForm.js\";\nimport React, { Component } from 'react';\nimport { Form, DropdownButton, Dropdown } from 'react-bootstrap';\nvar allInvalidError = \"Please enter a valid amount and payment type.\";\nvar amountInvalidError = \"Please enter a valid amount\";\nvar paymentTypeInvalidError = \"Please enter a valid payment type\";\n\nvar PaymentForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PaymentForm, _Component);\n\n  _createClass(PaymentForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// TODO: Log ReactGA stuff here\n    }\n  }]);\n\n  function PaymentForm(props) {\n    var _this;\n\n    _classCallCheck(this, PaymentForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaymentForm).call(this, props));\n    _this.state = {\n      validated: false,\n      paymentType: \"Payment type\",\n      paymentValid: false,\n      amount: \"\",\n      amountValid: false,\n      team: \"Select team\",\n      teamValid: false,\n      formChanged: false,\n      formValid: false,\n      error: allInvalidError\n    };\n    _this.submit = _this.submit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateTabs = _this.updateTabs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.formValid = _this.formValid.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAmount = _this.formValid.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateAmount = _this.validateAmount.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PaymentForm, [{\n    key: \"submit\",\n    value: function submit(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (!this.state.validated) {\n        this.setState({\n          validated: true\n        }, function () {\n          return _this2.updateTabs();\n        });\n      } else {\n        this.updateTabs();\n      }\n    }\n  }, {\n    key: \"updateTabs\",\n    value: function updateTabs() {\n      var _this3 = this;\n\n      this.setState({\n        formValid: this.formValid()\n      }, function () {\n        if (_this3.state.validated) {\n          if (_this3.state.formChanged) {\n            _this3.state.formValid ? _this3.props.enableConfirmation() : _this3.props.disableConfirmation();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"formValid\",\n    value: function formValid() {\n      return this.state.paymentValid && this.state.amountValid && this.state.teamValid;\n    }\n  }, {\n    key: \"handleAmount\",\n    value: function handleAmount(amount) {\n      var _this4 = this;\n\n      if (this.state.amount !== amount.target.value) {\n        if (!isNaN(amount.target.value)) {\n          var amountValid = this.validateAmount(amount.target.value);\n          this.setState({\n            formChanged: true,\n            amount: amount.target.value,\n            amountValid: amountValid,\n            error: amountValid ? paymentTypeInvalidError : allInvalidError\n          }, function () {\n            return _this4.updateTabs();\n          });\n        }\n      }\n    }\n  }, {\n    key: \"validateAmount\",\n    value: function validateAmount(amount) {\n      var amountRegex = /^\\$?[0-9]+(\\.[0-9][0-9])?$/;\n      return amountRegex.test(amount.trim());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(DropdownButton, {\n        id: \"paymentType\",\n        title: this.state.paymentType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onSelect: function onSelect() {\n          return _this5.setState({\n            paymentType: \"Credit / Debit\",\n            paymentValid: true,\n            error: amountInvalidError\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Credit / Debit\"), React.createElement(Dropdown.Item, {\n        onSelect: function onSelect() {\n          return _this5.setState({\n            paymentType: \"IBAN\",\n            paymentValid: true,\n            error: amountInvalidError\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"IBAN\"), React.createElement(Dropdown.Item, {\n        onSelect: function onSelect() {\n          return _this5.setState({\n            paymentType: \"iDEAL\",\n            paymentValid: true,\n            error: amountInvalidError\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"iDEAL\"), React.createElement(Dropdown.Item, {\n        onSelect: function onSelect() {\n          return _this5.setState({\n            paymentType: \"Apple / Google Pay\",\n            paymentValid: true,\n            error: amountInvalidError\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Apple / Google Pay\")), React.createElement(Form, {\n        noValidate: true,\n        validated: this.state.validated,\n        onSubmit: function onSubmit(e) {\n          return _this5.submit(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Form.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"amount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Amount (USD)\"), React.createElement(Form.Control, {\n        required: true,\n        type: \"text\",\n        placeholder: \"12.34\",\n        value: this.state.amonut,\n        onChange: function onChange(e) {\n          return _this5.handleAmount(e);\n        },\n        isValid: this.state.validated ? this.state.amountValid && this.state.paymentValid : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(Form.Control.Feedback, {\n        type: \"invalid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, this.state.error)))));\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var nextStateImportant = [nextState.validated, nextState.amount, nextState.paymentType, nextState.amountValid, nextState.paymentValid, nextState.error];\n      var thisStateImportant = [this.state.validated, this.state.amount, this.state.amountValid, this.state.paymentType, this.state.paymentValid, this.state.error];\n      return nextStateImportant !== thisStateImportant;\n    }\n  }]);\n\n  return PaymentForm;\n}(Component);\n\nexport { PaymentForm as default };","map":{"version":3,"sources":["/Users/OwenScott/FTC/PATHFINDERS ROBOTICS/Web Services/pathfinders/src/main/client/src/components/views/Donate/PaymentForm.js"],"names":["React","Component","Form","DropdownButton","Dropdown","allInvalidError","amountInvalidError","paymentTypeInvalidError","PaymentForm","props","state","validated","paymentType","paymentValid","amount","amountValid","team","teamValid","formChanged","formValid","error","submit","bind","updateTabs","handleAmount","validateAmount","event","preventDefault","stopPropagation","setState","enableConfirmation","disableConfirmation","target","value","isNaN","amountRegex","test","trim","e","amonut","nextProps","nextState","nextStateImportant","thisStateImportant"],"mappings":"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","sourcesContent":["// @flow\n\nimport React, {Component} from 'react';\nimport {Form, DropdownButton, Dropdown} from 'react-bootstrap';\n\nconst allInvalidError = \"Please enter a valid amount and payment type.\";\nconst amountInvalidError = \"Please enter a valid amount\";\nconst paymentTypeInvalidError = \"Please enter a valid payment type\";\n\nexport default class PaymentForm extends Component {\n    componentDidMount() {\n        // TODO: Log ReactGA stuff here\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            validated: false,\n            paymentType: \"Payment type\",\n            paymentValid: false,\n            amount: \"\",\n            amountValid: false,\n            team: \"Select team\",\n            teamValid: false,\n            formChanged: false,\n            formValid: false,\n            error: allInvalidError\n        };\n\n        this.submit = this.submit.bind(this);\n        this.updateTabs = this.updateTabs.bind(this);\n        this.formValid = this.formValid.bind(this);\n        this.handleAmount = this.formValid.bind(this);\n        this.validateAmount = this.validateAmount.bind(this);\n    }\n\n    submit(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (!this.state.validated) {\n            this.setState({ validated: true }, () => this.updateTabs());\n        } else {\n            this.updateTabs();\n        }\n    }\n\n    updateTabs() {\n        this.setState({ formValid: this.formValid() }, () => {\n            if (this.state.validated) {\n                if (this.state.formChanged) {\n                    this.state.formValid ? this.props.enableConfirmation() : this.props.disableConfirmation();\n                }\n            }\n        });\n    }\n\n    formValid() {\n        return this.state.paymentValid && this.state.amountValid && this.state.teamValid;\n    }\n\n    handleAmount(amount) {\n        if (this.state.amount !== amount.target.value) {\n            if (!isNaN(amount.target.value)) {\n                let amountValid = this.validateAmount(amount.target.value);\n                this.setState(\n                    {\n                        formChanged: true,\n                        amount: amount.target.value,\n                        amountValid: amountValid,\n                        error: amountValid ? paymentTypeInvalidError : allInvalidError\n                    },\n                    () => this.updateTabs()\n                );\n            }\n        }\n    }\n\n    validateAmount(amount) {\n        const amountRegex = /^\\$?[0-9]+(\\.[0-9][0-9])?$/;\n        return amountRegex.test(amount.trim());\n    }\n\n    render() {\n        return (\n            <div>\n                <br/>\n                <DropdownButton id=\"paymentType\" title={this.state.paymentType}>\n                    <Dropdown.Item onSelect={() => this.setState(\n                        {   \n                            paymentType: \"Credit / Debit\",\n                            paymentValid: true,\n                            error: amountInvalidError\n                        }\n                        )}>Credit / Debit</Dropdown.Item>\n                    <Dropdown.Item onSelect={() => this.setState(\n                        {\n                            paymentType: \"IBAN\",\n                            paymentValid: true,\n                            error: amountInvalidError\n                        }\n                        )}>IBAN</Dropdown.Item>\n                    <Dropdown.Item onSelect={() => this.setState(\n                        {\n                            paymentType: \"iDEAL\",\n                            paymentValid: true,\n                            error: amountInvalidError\n                        }\n                        )}>iDEAL</Dropdown.Item>\n                    <Dropdown.Item onSelect={() => this.setState(\n                        {\n                            paymentType: \"Apple / Google Pay\",\n                            paymentValid: true,\n                            error: amountInvalidError\n                        }\n                        )}>Apple / Google Pay</Dropdown.Item>\n                </DropdownButton>\n                <Form\n                    noValidate\n                    validated={this.state.validated}\n                    onSubmit={e => this.submit(e)}\n                >\n                    <Form.Row>\n                        <Form.Group controlId=\"amount\">\n                            <Form.Label>Amount (USD)</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"12.34\"\n                                value={this.state.amonut}\n                                onChange={e => this.handleAmount(e)}\n                                isValid={this.state.validated ? this.state.amountValid && this.state.paymentValid : null}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {this.state.error}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                </Form>\n            </div>\n        );\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        let nextStateImportant = [\n            nextState.validated,\n            nextState.amount,\n            nextState.paymentType,\n            nextState.amountValid,\n            nextState.paymentValid,\n            nextState.error\n        ];\n        let thisStateImportant = [\n            this.state.validated,\n            this.state.amount,\n            this.state.amountValid,\n            this.state.paymentType,\n            this.state.paymentValid,\n            this.state.error\n        ];\n        return nextStateImportant !== thisStateImportant;\n    }\n}"]},"metadata":{},"sourceType":"module"}