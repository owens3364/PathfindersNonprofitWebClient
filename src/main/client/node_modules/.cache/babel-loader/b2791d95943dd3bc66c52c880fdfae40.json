{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp2;\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport InputMask from 'inputmask-core';\nvar KEYCODE_Z = 90;\nvar KEYCODE_Y = 89;\n\nfunction isUndo(e) {\n  return (e.ctrlKey || e.metaKey) && e.keyCode === (e.shiftKey ? KEYCODE_Y : KEYCODE_Z);\n}\n\nfunction isRedo(e) {\n  return (e.ctrlKey || e.metaKey) && e.keyCode === (e.shiftKey ? KEYCODE_Z : KEYCODE_Y);\n}\n\nfunction getSelection(el) {\n  var start = void 0,\n      end = void 0;\n\n  if (el.selectionStart !== undefined) {\n    start = el.selectionStart;\n    end = el.selectionEnd;\n  } else {\n    try {\n      el.focus();\n      var rangeEl = el.createTextRange();\n      var clone = rangeEl.duplicate();\n      rangeEl.moveToBookmark(document.selection.createRange().getBookmark());\n      clone.setEndPoint('EndToStart', rangeEl);\n      start = clone.text.length;\n      end = start + rangeEl.text.length;\n    } catch (e) {\n      /* not focused or not visible */\n    }\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n\nfunction setSelection(el, selection) {\n  try {\n    if (el.selectionStart !== undefined) {\n      el.focus();\n      el.setSelectionRange(selection.start, selection.end);\n    } else {\n      el.focus();\n      var rangeEl = el.createTextRange();\n      rangeEl.collapse(true);\n      rangeEl.moveStart('character', selection.start);\n      rangeEl.moveEnd('character', selection.end - selection.start);\n      rangeEl.select();\n    }\n  } catch (e) {\n    /* not focused or not visible */\n  }\n}\n\nvar MaskedInput = (_temp2 = _class = function (_React$Component) {\n  _inherits(MaskedInput, _React$Component);\n\n  function MaskedInput() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, MaskedInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this._onChange = function (e) {\n      // console.log('onChange', JSON.stringify(getSelection(this.input)), e.target.value)\n      var maskValue = _this.mask.getValue();\n\n      var incomingValue = e.target.value;\n\n      if (incomingValue !== maskValue) {\n        // only modify mask if form contents actually changed\n        _this._updateMaskSelection();\n\n        _this.mask.setValue(incomingValue); // write the whole updated value into the mask\n\n\n        e.target.value = _this._getDisplayValue(); // update the form with pattern applied to the value\n\n        _this._updateInputSelection();\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(e);\n      }\n    }, _this._onKeyDown = function (e) {\n      // console.log('onKeyDown', JSON.stringify(getSelection(this.input)), e.key, e.target.value)\n      if (isUndo(e)) {\n        e.preventDefault();\n\n        if (_this.mask.undo()) {\n          e.target.value = _this._getDisplayValue();\n\n          _this._updateInputSelection();\n\n          if (_this.props.onChange) {\n            _this.props.onChange(e);\n          }\n        }\n\n        return;\n      } else if (isRedo(e)) {\n        e.preventDefault();\n\n        if (_this.mask.redo()) {\n          e.target.value = _this._getDisplayValue();\n\n          _this._updateInputSelection();\n\n          if (_this.props.onChange) {\n            _this.props.onChange(e);\n          }\n        }\n\n        return;\n      }\n\n      if (e.key === 'Backspace') {\n        e.preventDefault();\n\n        _this._updateMaskSelection();\n\n        if (_this.mask.backspace()) {\n          var value = _this._getDisplayValue();\n\n          e.target.value = value;\n\n          if (value) {\n            _this._updateInputSelection();\n          }\n\n          if (_this.props.onChange) {\n            _this.props.onChange(e);\n          }\n        }\n      }\n    }, _this._onKeyPress = function (e) {\n      // console.log('onKeyPress', JSON.stringify(getSelection(this.input)), e.key, e.target.value)\n      // Ignore modified key presses\n      // Ignore enter key to allow form submission\n      if (e.metaKey || e.altKey || e.ctrlKey || e.key === 'Enter') {\n        return;\n      }\n\n      e.preventDefault();\n\n      _this._updateMaskSelection();\n\n      if (_this.mask.input(e.key || e.data)) {\n        e.target.value = _this.mask.getValue();\n\n        _this._updateInputSelection();\n\n        if (_this.props.onChange) {\n          _this.props.onChange(e);\n        }\n      }\n    }, _this._onPaste = function (e) {\n      // console.log('onPaste', JSON.stringify(getSelection(this.input)), e.clipboardData.getData('Text'), e.target.value)\n      e.preventDefault();\n\n      _this._updateMaskSelection(); // getData value needed for IE also works in FF & Chrome\n\n\n      if (_this.mask.paste(e.clipboardData.getData('Text'))) {\n        e.target.value = _this.mask.getValue(); // Timeout needed for IE\n\n        setTimeout(function () {\n          return _this._updateInputSelection();\n        }, 0);\n\n        if (_this.props.onChange) {\n          _this.props.onChange(e);\n        }\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  MaskedInput.prototype.componentWillMount = function componentWillMount() {\n    var options = {\n      pattern: this.props.mask,\n      value: this.props.value,\n      formatCharacters: this.props.formatCharacters\n    };\n\n    if (this.props.placeholderChar) {\n      options.placeholderChar = this.props.placeholderChar;\n    }\n\n    this.mask = new InputMask(options);\n  };\n\n  MaskedInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.mask !== nextProps.mask && this.props.value !== nextProps.mask) {\n      // if we get a new value and a new mask at the same time\n      // check if the mask.value is still the initial value\n      // - if so use the nextProps value\n      // - otherwise the `this.mask` has a value for us (most likely from paste action)\n      if (this.mask.getValue() === this.mask.emptyValue) {\n        this.mask.setPattern(nextProps.mask, {\n          value: nextProps.value\n        });\n      } else {\n        this.mask.setPattern(nextProps.mask, {\n          value: this.mask.getRawValue()\n        });\n      }\n    } else if (this.props.mask !== nextProps.mask) {\n      this.mask.setPattern(nextProps.mask, {\n        value: this.mask.getRawValue()\n      });\n    } else if (this.props.value !== nextProps.value) {\n      this.mask.setValue(nextProps.value);\n    }\n  };\n\n  MaskedInput.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {\n    if (nextProps.mask !== this.props.mask) {\n      this._updatePattern(nextProps);\n    }\n  };\n\n  MaskedInput.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.mask !== this.props.mask && this.mask.selection.start) {\n      this._updateInputSelection();\n    }\n  };\n\n  MaskedInput.prototype._updatePattern = function _updatePattern(props) {\n    this.mask.setPattern(props.mask, {\n      value: this.mask.getRawValue(),\n      selection: getSelection(this.input)\n    });\n  };\n\n  MaskedInput.prototype._updateMaskSelection = function _updateMaskSelection() {\n    this.mask.selection = getSelection(this.input);\n  };\n\n  MaskedInput.prototype._updateInputSelection = function _updateInputSelection() {\n    setSelection(this.input, this.mask.selection);\n  };\n\n  MaskedInput.prototype._getDisplayValue = function _getDisplayValue() {\n    var value = this.mask.getValue();\n    return value === this.mask.emptyValue ? '' : value;\n  };\n\n  MaskedInput.prototype._keyPressPropName = function _keyPressPropName() {\n    if (typeof navigator !== 'undefined') {\n      return navigator.userAgent.match(/Android/i) ? 'onBeforeInput' : 'onKeyPress';\n    }\n\n    return 'onKeyPress';\n  };\n\n  MaskedInput.prototype._getEventHandlers = function _getEventHandlers() {\n    var _ref;\n\n    return _ref = {\n      onChange: this._onChange,\n      onKeyDown: this._onKeyDown,\n      onPaste: this._onPaste\n    }, _ref[this._keyPressPropName()] = this._onKeyPress, _ref;\n  };\n\n  MaskedInput.prototype.focus = function focus() {\n    this.input.focus();\n  };\n\n  MaskedInput.prototype.blur = function blur() {\n    this.input.blur();\n  };\n\n  MaskedInput.prototype.render = function render() {\n    var _this2 = this;\n\n    var ref = function ref(r) {\n      _this2.input = r;\n    };\n\n    var maxLength = this.mask.pattern.length;\n\n    var value = this._getDisplayValue();\n\n    var eventHandlers = this._getEventHandlers();\n\n    var _props = this.props,\n        _props$size = _props.size,\n        size = _props$size === undefined ? maxLength : _props$size,\n        _props$placeholder = _props.placeholder,\n        placeholder = _props$placeholder === undefined ? this.mask.emptyValue : _props$placeholder;\n\n    var _props2 = this.props,\n        placeholderChar = _props2.placeholderChar,\n        formatCharacters = _props2.formatCharacters,\n        cleanedProps = _objectWithoutProperties(_props2, ['placeholderChar', 'formatCharacters']); // eslint-disable-line no-unused-vars\n\n\n    var inputProps = _extends({}, cleanedProps, eventHandlers, {\n      ref: ref,\n      maxLength: maxLength,\n      value: value,\n      size: size,\n      placeholder: placeholder\n    });\n\n    return React.createElement('input', inputProps);\n  };\n\n  return MaskedInput;\n}(React.Component), _class.defaultProps = {\n  value: ''\n}, _temp2);\nMaskedInput.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  mask: PropTypes.string.isRequired,\n  formatCharacters: PropTypes.object,\n  placeholderChar: PropTypes.string\n} : {};\nexport default MaskedInput;","map":null,"metadata":{},"sourceType":"module"}